#!/bin/sh

# {{{ Copyright ==============================================================

# Build system for generating SlackBuild scripts

# Copyright 2010  David Woodfall <info@davidwoodfall.co.uk>
# Modifications copyright 2010 slakmagik <slakmagik@gmail.com>
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# }}}
# {{{ Global variables =======================================================

SCRIPT=${0##*/}
SCRIPTVERSION=3.2
if [ -z "$ARCH" ]; then
  case "$( uname -m )" in
    i?86) ARCH=i486 ;;
    arm*) ARCH=arm ;;
       *) ARCH=$( uname -m ) ;;
  esac
fi
BUILD=${BUILD:-1}
CWD=$(pwd)
PKGTMP=/tmp
TEMPLATES=/usr/share/mkslack/templates
CONFIG=/etc/mkslack/mkslack.conf
DOCS="
	$DOCS
	AUTHORS
	CHANGELOG
	CHANGES
	CODING_STYLE
	COPYING
	COPYRIGHT
	CREDITS
	ChangeLog
	Changelog
	CopyRight
	Copyright
	HACKING
	INSTALL
	LICENSE
	MAINTAINERS
	NEWS
	README
	THANKS
	TODO
	VERSION
	"

bred='\e[01;31m'
normal='\e[m\017'

# }}}
# {{{ Functions ==============================================================

usage() {
cat << EOF
$SCRIPT $SCRIPTVERSION - a SlackBuild generator script
(C) David Woodfall 2010
(C) slakmagik 2010

Syntax:

mkslack [OPTIONS] ARCHIVE

OPTIONS:
-h | --help		Print this message.
-b | --build		Build the package with the SlackBuild. Got root?
-i | --install		Install the package after building (implies -b).
-v | --version		Print version.
-V | --ckver		Check for an updated version.

The documents list in top level of source tree can be adjusted by giving the
command:
DOCS="SomeFile" mkslack ARCHIVE
This will add 'SomeFile' to the list. You can also edit the DOCS list in
this script. Any that it doesn't find will be removed from the list.

Similarly, BUILD (default=1), ARCH (default=i486), and TAG (default=SBo) can
be specified by:
VARIABLE=VALUE mkslack [OPTIONS] ARCHIVE
EOF
}

validate_cfg() {
	if [ -z "$KEEPBACKUPS" ]; then
		MISSING="KEEPBACKUPS $MISSING"
	fi
	if [ -z "$TAG" ]; then
		MISSING="TAG $MISSING"
	fi
	if [ -z "$EMAIL" ]; then
		MISSING="EMAIL $MISSING"
	fi
	if [ -z "$NAME" ]; then
		MISSING="NAME $MISSING"
	fi
    if [ -z "$ERRORACTION" ]; then
        MISSING="ERRORACTION $MISSING"
    fi

	if ! echo $TAG | grep -q '^_'; then
		UNDERSCORE="TAG is missing the required underscore."
		if [ -n "$MISSING" ]; then
			UNDERSCORE="Additionally, $UNDERSCORE"
		fi
	fi

	if [ -n "$MISSING" ] || [ -n "$UNDERSCORE" ]; then
		printf "$SCRIPT: configuration file error(s):\n" >&2
		if [ -n "$MISSING" ]; then
			printf "the following variable(s) are not properly set:\n" >&2
			printf "$MISSING\n" >&2
		fi
		if [ -n "$UNDERSCORE" ]; then
			printf "$UNDERSCORE\n" >&2
		fi
		return 1
	fi
}

parse_archive() {
	BASENAME=${FILENAME##*/}

	if [ ! -f "$FILENAME" ]; then
		printf "$SCRIPT: file not found.\n" >&2
		return 1
	fi

	ARCHIVE=$(echo $BASENAME | awk -F . '{print $(NF-1)"."$(NF)}')
	if [ "${ARCHIVE##*.}" = "tgz" ]; then ARCHIVE=tgz; fi
	if [ "${ARCHIVE##*.}" = "zip" ]; then ARCHIVE=zip; fi
	VERSION=$(echo $BASENAME | awk -F - '{print $NF}' |
		sed "s/$ARCHIVE//;s/.$//")
	PRGNAM=$(echo $BASENAME | sed "s/-$VERSION//;s/$ARCHIVE//;s/.$//")
	# for use in the SBo files when the source and program name will
	# differ (e.g., prepending 'perl-' to perl packages
	SRCNAM=$PRGNAM
	FULLCONTENTS=$(tar tf $PRGNAM-$VERSION.$ARCHIVE 2>/dev/null)
	TOPCONTENTS=$(echo "$FULLCONTENTS" | cut -d/ -f2)
	SOURCE_DIR=$(echo "$FULLCONTENTS" | cut -d/ -f1 | head -n 1)
    TMP=$PKGTMP/${TAG#_}
    PKG=$TMP/package-$PRGNAM
}

common() {
	if [ -n "$DOCS" ]; then
		printf "Generating documentation line ...\n"

		for i in $DOCS; do
			DOC=$(echo "$TOPCONTENTS" | grep $i)
			FULLDOCS=$FULLDOCS$(echo $DOC | cut -d/ -f2)" "
		done

		if echo "$TOPCONTENTS" | grep -qw 'docs';then
			FULLDOCS="$FULLDOCS docs"
		fi

		if echo "$TOPCONTENTS" | grep -qw 'DOCS';then
			FULLDOCS="$FULLDOCS DOCS"
		fi

		if echo "$TOPCONTENTS" | grep -q '.txt';then
			FULLDOCS="$FULLDOCS *.txt"
		fi

		if echo "$TOPCONTENTS" | grep -q '.TXT';then
			FULLDOCS="$FULLDOCS *.TXT"
		fi

		FULLDOCS=$(echo "$FULLDOCS" | tr -s " ")

		sed -i "s#<documentation>#$FULLDOCS#" $PRGNAM.SlackBuild

		printf "%s%s\n" "Docs: " "$FULLDOCS"
		printf "Extra documents should be specified on the command line "
		printf "or added later.\n"
	else
		sed -i '/cp -a/{N;N;/<documentation>/d}' $PRGNAM.SlackBuild
	fi

	if [ -n "$SRCNAM" ]; then
		sed -i "s%@SRCNAM@%$SRCNAM%g" $PRGNAM.SlackBuild
	fi
	sed -i "
		s%@PRGNAM@%$PRGNAM%g
		s%@VERSION@%$VERSION%g
		s%@ARCHIVE@%$ARCHIVE%g
		s%@NAME@%$NAME%g
		s%@EMAIL@%$EMAIL%g
		s%@TAG@%$TAG%g
		s%@TMP@%${TAG#_}%g
		" $PRGNAM.SlackBuild

	printf "SlackBuild generated.\n"

	backup doinst.sh

	if echo $FULLCONTENTS | grep -q $PRGNAM.desktop; then
		printf "Desktop file found. Editing doinst.sh.\n"
cat << EOF > $CWD/doinst.sh
# We'll assume that a desktop file also indicates an icon
# But you should edit this as needed.

 if [ -x /usr/bin/update-desktop-database ]; then
   /usr/bin/update-desktop-database -q usr/share/applications >/dev/null 2>&1
 fi

 if [ -e usr/share/icons/hicolor/icon-theme.cache ]; then
   if [ -x /usr/bin/gtk-update-icon-cache ]; then
     /usr/bin/gtk-update-icon-cache usr/share/icons/hicolor >/dev/null 2>&1
   fi
 fi

EOF
	fi

	if echo $FULLCONTENTS | grep -q $PRGNAM.xml; then
		printf "Looks like a mimetype file. Editing doinst.sh.\n"
cat << EOF >> $CWD/doinst.sh
# Looks like a mimetype file.

 if [ -x /usr/bin/update-mime-database ]; then
   /usr/bin/update-mime-database usr/share/mime >/dev/null 2>&1
 fi

EOF
	fi

	if [ ! -r doinst.sh ]; then
		sed -i '/cat $CWD\/doinst.sh/d' $PRGNAM.SlackBuild
	fi

	if [ "$SOURCE_DIR" != "$PRGNAM-$VERSION" ] &&
			[ "$SOURCE_DIR" != "$SRCNAM-$VERSION" ]; then
		printf $bred"Archive source output directory does not match "
		printf "archive name.\n"
		printf $bred"You will need to adjust the SlackBuild by hand "
		printf "to account for this.\n"
		printf $normal
		_BUILD=""
	fi
}

autotools() {
	if [ -n "$autogen" ]; then
		printf "No configure file found.\nFound autogen.sh\n"
		sed -i "/^CFLAGS=/i\./autogen.sh" $PRGNAM.SlackBuild
	fi

	if [ -n "$autoconf" ]; then
		printf "No configure file or autogen.sh found.\n"
		printf "Adding autoreconf -i --force\n"
		sed -i '/^CFLAGS=/i\autoreconf -i --force' $PRGNAM.SlackBuild
	fi
	common
}

rm_man() {
    # Remove man page lines if not needed
    printf "No man directory found. Removing from SlackBuild.\n"
    sed -i '/find $PKG.usr.man -type f/,/^$/d' $PRGNAM.SlackBuild

}

rm_info() {
    # Remove info page lines if not needed
    printf "No info directory found. Removing from SlackBuild.\n"
    sed -i '/rm -f $PKG.usr.info.dir/,/^$/d' $PRGNAM.SlackBuild
}

rm_special() {
    # Remove special files line if not needed
    printf "No special files found. Removing from SlackBuild.\n"
    sed -i '/^find $PKG -name "perllocal.pod"/d' $PRGNAM.SlackBuild
}
 
rm_man_info() {
	# Remove man page lines if not needed
	if ! echo $TOPCONTENTS | grep -q man/; then
		printf "No man directory found. Removing from SlackBuild.\n"
		sed -i '/find $PKG.usr.man -type f/,/^$/d' $PRGNAM.SlackBuild
	fi

	# Remove info page lines if not needed
	if ! echo $TOPCONTENTS | grep info/; then
		printf "No info directory found. Removing from SlackBuild.\n"
		sed -i '/rm -f $PKG.usr.info.dir/,/^$/d' $PRGNAM.SlackBuild
	fi
	sed -i '/^find $PKG -name "perllocal.pod"/d' $PRGNAM.SlackBuild
}

perl() {
	makefile=$(echo "$TOPCONTENTS" | grep -i makefile.pl)
	build=$(echo "$TOPCONTENTS" | grep -i build.pl)
	
	if [ -n "$makefile" ]; then
		sed -i "s/Makefile.PL/$makefile/" $PRGNAM.SlackBuild
		sed -i '/perl Build.PL/,/^$/d' $PRGNAM.SlackBuild
	elif [ -n "$build" ]; then
		sed -i "s/Build.PL/$build/" $PRGNAM.SlackBuild
		sed -i '/perl Makefile.PL/,/^$/d' $PRGNAM.SlackBuild
	fi
	common
}

python() {
	common
}

cmake() {
	common
}

pick_template() {
	printf "$SCRIPT: looking to see what sort of template to use...\n"

	if echo $TOPCONTENTS | grep -q CMakeLists.txt; then
		printf "Looks like a cmake package.\n"
		BUILDTYPE=cmake
	elif echo $TOPCONTENTS | grep -q setup.py; then
		printf "Looks like a python package.\n"
		SRCNAM=$PRGNAM
		PRGNAM=python-$SRCNAM
		BUILDTYPE=python
	elif echo $TOPCONTENTS | egrep -qi '(Makefile|Build).PL'; then
		printf "Looks like a perl package.\n"
		SRCNAM=$PRGNAM
		PRGNAM=perl-$SRCNAM
		BUILDTYPE=perl
	else
		printf "Looks like a standard autotools package.\n"
		BUILDTYPE=autotools
		if ! echo "$TOPCONTENTS" | grep -q 'configure$'; then
			if echo $TOPCONTENTS | grep -q 'autogen.sh'; then
				autogen=YES
			else
				autoconf=YES
			fi
		fi
	fi

	printf "%-9s%s\n" "PRGNAM:" "$PRGNAM"
	printf "%-9s%s\n" "VERSION:" "$VERSION"
	printf "%-9s%s\n" "ARCH:" "$ARCH"
	printf "%-9s%s\n" "BUILD:" "$BUILD"
	printf "%-9s%s\n" "TAG:" "$TAG"

	TEMPLATE=$BUILDTYPE-template.SlackBuild

	backup $PRGNAM.SlackBuild
	cat $TEMPLATES/$TEMPLATE > $PRGNAM.SlackBuild
	chmod +x $PRGNAM.SlackBuild

	$BUILDTYPE # function call
}

fix_build_errors() {
    if [ -d $PKG/usr/share/man ]; then
        printf "Moving $PKG/usr/share/man pages to $PKG/usr/man.\n"
        n=$(grep -n 'find $PKG/usr/man -type f' $PRGNAM.SlackBuild | cut -d: -f1)
        sed -i "$n imv \$PKG/usr/share/man \$PKG/usr" $PRGNAM.SlackBuild
        mv $PKG/usr/share/man $PKG/usr
    fi

    if [ ! -d $PKG/usr/man ]; then
        rm_man
    fi

    if [ ! -d $PKG/usr/info ]; then
        rm_info
    fi

    if [ ! $(find $PKG -name perllocal.pod -o -name ".packlist" -o -name "*.bs") ]; then
        rm_special
    fi

    sleep 2

    build
}

build() {
	if [ "$(id -u)" -ne 0 ]; then
		printf "You need to be root to run the SlackBuild\n" >&2
		exit 1
	fi

	sh $PRGNAM.SlackBuild 2> $PKGTMP/mkslack-error.log 

	if [ $? = 1 ]; then
		ERROR=$(tail -n 1 $PKGTMP/mkslack-error.log)
		echo $ERROR

		if [[ -z $(echo $ERROR | grep "No such file or directory" \
			| grep -e "usr/info" -e "usr/man") ]]; then
			printf "Unknown error. Exiting.\n" >&2
			exit 1
		else

			if [ $ERRORACTION = "PROMPT" ]; then
				printf "Do you want me to adjust the SlackBuild and retry building it? y/n "
				read
				case $REPLY in
					y|Y) fix_build_errors
					;;
					*)
					exit 1
					;;
				esac
			elif [ $ERRORACTION = "AUTO" ]; then
				fix_build_errors
			elif [ $ERRORACTION = "EXIT" ]; then
				exit 1
			fi
		fi
	fi


	if [ -n "$INSTALL" ]; then
		upgradepkg --reinstall --install-new \
			$PKGTMP/$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.t?z
	fi
}

make_files() {
	backup $PRGNAM.info slack-desc
	cat $TEMPLATES/template.info > $PRGNAM.info
	cat $TEMPLATES/slack-desc > slack-desc

	blank=$(echo $PRGNAM | tr [:graph:] " ")
	sed -i "
		s%       |%$blank|%
		s%appname%$PRGNAM%g
		9s/$PRGNAM:/$PRGNAM: $PRGNAM/
		" slack-desc
	sed -i "
		s%@PRGNAM@%$PRGNAM%g
		s%@VERSION@%$VERSION%g
		s%@NAME@%$NAME%g
		s%@EMAIL@%$EMAIL%g
		" $PRGNAM.info

	MD5SUM=$(md5sum $SRCNAM-$VERSION.$ARCHIVE | cut -d' ' -f1)

	printf "md5sum of archive:\t$MD5SUM\n"
	
	if [ "$ARCH" = "i486" ] || [ "$ARCH" = "i686" ]; then
		sed -i "s%@md5sum@%$MD5SUM%;s%@md5sum64@%%" $PRGNAM.info
	elif [ "$ARCH" = "x86_64" ]; then
		sed -i "s%@md5sum64@%$MD5SUM%;s%@md5sum@%%" $PRGNAM.info
	fi
	printf "Info and slack-desc generated.\n"
}

version() {
	printf "$SCRIPT $SCRIPTVERSION\n"
}

check_version() {
	CKVER_CMD="finger @dawoodfall.net"

	printf "$SCRIPT: checking for newer version by $CKVER_CMD ...\n"
	latest=$($CKVER_CMD | awk '/mkslack/{print $2}')
	if [ -z "$latest" ]; then
		printf "Unable to verify latest version.\n" >&2
		return 1
	elif [ "$latest" != "$SCRIPTVERSION" ]; then
		printf "Newer version available: $latest\n"
	elif [ "$latest" = "$SCRIPTVERSION" ]; then
		printf "No newer version available.\n"
	fi
}

backup() {
	if [ "$KEEPBACKUPS" = "YES" ]; then
		for FILE in "$@"; do
			for n in $(seq 4 -1 1); do
				if [ -r $FILE.$n ]; then
					mv -f $FILE.$n $FILE.$(($n+1))
				fi
			done
			if [ -r $FILE ]; then
				mv -f $FILE $FILE.1
			fi
		done
	fi
}

# }}}
# {{{ Main ===================================================================

if [ -r $CONFIG ]; then
	. $CONFIG
	validate_cfg || exit 1
else
	printf "$SCRIPT: config file not found or not readable." >&2
	exit 1
fi

until [ -z "$1" ]; do
	case "$1" in
		-h|--help) usage; exit ;;
		-b|--build) _BUILD=1 ;;
		-i|--install) INSTALL=1 ;;
		-v|--version) version; exit ;;
		-V|--ckver) check_version; exit ;;
		*) FILENAME="$1" ;;
	esac
	shift
done

parse_archive || exit 1
pick_template
make_files

if [ -n "$_BUILD" ] || [ -n "$INSTALL" ]; then
	build
fi

# }}}
# FIXME: I never use tabs - the following modeline overrides my .vimrc so I
# can comfortably edit this file without messing up the pre-existent tabs, but
# needs to be removed.
# vim:set ts=4 noet:
# This one can be kept
# vim:set fdm=marker nofen:
